module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output a, //new output a
    output b, // new output b
    output cin, // new output cin
    input sum, // new input sum
    input cout // new input cout
    
  ) { 
   
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    edge_detector edge_detector (#RISE(1), #FALL(0));
    
    .rst(rst) {
      multi_seven_seg seg;
      multi_dec_ctr dec_ctr;
      counter ctr (#SIZE(1), #DIV(24));
    }
  }
  
  fsm state(.clk(clk)) = {IDLE, TEST1, TEST2, TEST3, TEST4, TEST5, TEST6, TEST7, TEST8, FAIL, SUCCESS}; //fsm state machine for all stages
  stateCounter sc(.clk(clk),.rst(rst)); //timing gate for the counter to loop through all the states
  
  always {
    a=b0;
    b=b0;
    cin=b0;
    // Default file unchanged.
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    led = c{3b0, io_button};  // connect buttons to LEDs
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    edge_detector.in = ctr.value;
    dec_ctr.inc = edge_detector.out;
    
    // NEW, default the segments to display zeroes.
    seg.values = {4h0, 4h0, 4h0, 4h0};
    
    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = ~seg.sel; // connect digit select to the driver
    io_led = io_dip;   // connect the DIP switches to the LEDs
        
    case (state.q) { //all possible combinations of the states and in intended input and output
      state.IDLE:
        if(io_button[1]) { //start of automated testing
          state.d = state.TEST1;
        }
      // TEST ONE: 000
      state.TEST1:
        a = 0;
        b = 0;
        cin = 0;
        io_led[2][7] = 1; //led indicator
        seg.values = {4h0, 4h0, 4h0, 4h0}; //seven segment light 0000        
        if (sum == 0 && cout == 0 && sc.inc_state == 1) { //check intputs when counter
          state.d = state.TEST2; //move to next state
        }
        else if (sum != 0 && cout != 0 && sc.inc_state == 1) { //wrong input
          state.d = state.FAIL; //move to fail state
        }        
        if (rst_n == 0) { //reset
          state.d = state.IDLE; //move to idle state
        }
      // TEST TWO: 001
      state.TEST2:
        a = 0;
        b = 0;
        cin = 1;
        io_led[2][6] = 1; //led indicator
        seg.values = {4h0, 4h0, 4h0, 4h1}; //seven segment light 0001        
        if (sum == 1 && cout == 0 && sc.inc_state == 1) {
          state.d = state.TEST3;
        }
        else if (sum != 1 && cout != 0 && sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        if(rst_n == 0) {
          state.d = state.IDLE;
        }
      // TEST THREE: 010
      state.TEST3:
        a = 0;
        b = 1;
        cin = 0;
        io_led[2][5] = 1;
        seg.values = {4h0, 4h0, 4h1, 4h0};
        if (sum == 1 && cout == 0 && sc.inc_state == 1) {
          state.d = state.TEST4;
        }
        else if (sum != 1 && cout != 0 && sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        if(rst_n == 0) {
          state.d = state.IDLE;
        }
      // TEST FOUR: 011 
      state.TEST4:
        a = 0;
        b = 1;
        cin = 1;
        io_led[2][4] = 1;
        seg.values = {4h0, 4h0, 4h1, 4h1};
        if (sum == 0 && cout == 1 && sc.inc_state == 1) {
          state.d = state.TEST5;
        }
        else if (sum != 0 && cout != 1 && sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        if(rst_n == 0) {
          state.d = state.IDLE;
        }
      // TEST FIVE: 100
      state.TEST5:
        a = 1;
        b = 0;
        cin = 0;
        io_led[2][3] = 1;
        seg.values = {4h0, 4h1, 4h0, 4h0};
        if (sum == 1 && cout == 0 && sc.inc_state == 1) {
          state.d = state.TEST6;
        }
        else if (sum != 1 && cout != 0 && sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        if(rst_n == 0) {
          state.d = state.IDLE;
        }
      // TEST SIX: 101
      state.TEST6:
        a = 1;
        b = 0;
        cin = 1;
        io_led[2][2] = 1;
        seg.values = {4h0, 4h1, 4h0, 4h1};
        if (sum == 0 && cout == 1 && sc.inc_state == 1) {
          state.d = state.TEST7;
        }
        else if (sum != 0 && cout != 1 && sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        if(rst_n == 0) {
          state.d = state.IDLE;
        }
      // TEST SEVEN: 110
      state.TEST7:
        a = 1;
        b = 1;
        cin = 0;
        io_led[2][1] = 1;
        seg.values = {4h0, 4h1, 4h1, 4h0};
        if (sum == 0 && cout == 1 && sc.inc_state == 1) {
          state.d = state.TEST8;
        }
        else if (sum != 0 && cout != 1 && sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        if(rst_n == 0) {
          state.d = state.IDLE;
        }
      // TEST EIGHT: 111
      state.TEST8:
        a = 1;
        b = 1;
        cin = 1;
        io_led[2][0] = 1;
        seg.values = {4h0, 4h1, 4h1, 4h1};
        if (sum == 1 && cout == 1 && sc.inc_state == 1) {
          state.d = state.SUCCESS;
        }
        else if (sum != 1 && cout != 1 && sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        if(rst_n == 0) {
          state.d = state.IDLE;
        }      
      state.FAIL:
        if (sc.inc_state == 1) {
          seg.values = {4ha,4hb,4hc,4hd};
          io_led = 3x{{8hff}};
        }
        seg.values = {4ha,4hb,4hc,4hd};
        if (rst_n == 0) {
          state.d = state.IDLE;
        }
      state.SUCCESS:
        if (sc.inc_state == 1) {
          seg.values = {4he,4hb,4h5,4h5};
          io_led = 3x{{8hff}};
        }
        seg.values = {4he,4hb,4h5,4h5};
        if (rst_n == 0) {
          state.d = state.IDLE;
        }
      }
    }
}    